const expect = require('expect.js');
const { JsonParser } = require('../../extension/jsonParser');

describe('JsonParser', () => {
  let parser = text => new JsonParser(text);

  describe('when coverage text is undefined', () => {
    it('returns an empty object', () => {
      expect(parser().parse()).to.eql({});
    });
  });

  describe('when coverage text is an empty string', () => {
    it('returns an empty object', () => {
      expect(parser("").parse()).to.eql({});
    });
  });

  describe('when coverage text is invalid JSON', () => {
    it('returns an empty object', () => {
      expect(parser("Invalid JSON").parse()).to.eql({});
    });
  });

  describe('when coverage text is invalid Simplecov JSON', () => {
    it('returns an empty object', () => {
      expect(parser("{}").parse()).to.eql({});
    });
  });

  describe('when coverage generated by Simplecov >= 0.18', () => {
    const coverageObject = {
      "RSpec": {
        "coverage": {
          "file1": { "lines": [1, 0, null] },
          "file2": { "lines": [0, 0, null] },
          "file3": { "lines": [1, 1, null] },
        },
        "timestamp": 1593654870
      }
    };
    const text = JSON.stringify(coverageObject);

    it('returns an object with coverage summary data', () => {
      expect(parser(text).parse()).to.eql({
        "file1": "50",
        "file2": "0",
        "file3": "100"
      });
    });
  });

  describe('when coverage generated by Simplecov < 0.18', () => {
    const coverageObject = {
      "RSpec": {
        "coverage": {
          "file1": [1, 0, null],
          "file2": [0, 0, null],
          "file3": [1, 1, null]
        },
        "timestamp": 1593654870
      }
    };
    const text = JSON.stringify(coverageObject);

    it('returns an object with coverage summary data', () => {
      expect(parser(text).parse()).to.eql({
        "file1": "50",
        "file2": "0",
        "file3": "100"
      });
    });
  });
});
